

버블정렬
public class Test {
public static void main(String[] args) {
int v[]={5,8,1,9,3,5,1,5};
bubbleSort(v);
System.out.println(Arrays.toString(v));
}
private static void bubbleSort(int[] v) {
for (int i = 0; i < v.length; i++) {
for (int j = 1; j < v.length; j++) {
if(v[j-1]>v[j]) { // 인접 자료 간 순서 맞지 않으면 교환
int temp=v[j];
v[j]=v[j-1];
v[j-1]=temp;
}
}
}
}
}

선택정렬
public class Test {
public static void main(String[] args) {
int v[]={5,8,1,9,3,5,1,5};
selectionSort(v);
System.out.println(Arrays.toString(v));
}
private static void selectionSort(int[] v) {
for (int i = 0; i < v.length-1; i++) {
int minPos=i;
for (int j = i+1; j < v.length; j++) {
if(v[minPos]>v[j]) minPos=j;
}
int x=v[i]; v[i]=v[minPos]; v[minPos]=x;
}
}
}
삽입정렬

public class Test {
public static void main(String[] args) {
int v[]={5,8,1,9,3,5,1,5};
insertionSort(v);
System.out.println(Arrays.toString(v));
}
private static void insertionSort(int[] v) {
for (int i = 1; i < v.length; i++) {
for (int j = i; j>0 && v[j-1]>v[j]; j--) {
int x=v[j]; v[j]=v[j-1]; v[j-1]=x;
}
}
}
}
합병정렬

public class Test {
public static void main(String[] args) {
int v[]={8,5,9,1,5,3,5,1};
mergeSort(v, 0, v.length-1);
System.out.println(Arrays.toString(v));
}
private static void mergeSort(int[] v, int left, int right) {
if(left==right) return;
int m=(left+right)/2;
mergeSort(v, left, m);
mergeSort(v, m+1, right);
mergeArray(v, left, m, m+1, right);
}
private static void mergeArray(int[] v, int left1, int right1, int left2, int right2) {
int w[]=new int[right2-left1+1];
int i=left1, j=left2, k=0;
while(i<=right1 && j<=right2) w[k++]=(v[i]<v[j])? v[i++] : v[j++];
while(i<=right1) w[k++]=v[i++];
while(j<=right2) w[k++]=v[j++];
System.arraycopy(w, 0, v, left1, w.length);
System.out.println(Arrays.toString(v));
}
}